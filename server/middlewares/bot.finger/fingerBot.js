

function useMessageInteraction({ client, bot }){

  const {
    usedMeta,
    parseCommandMessage
  } = useCommandMessageHelper(bot)
  
  //mentionHelper(event)
  /*
    channelId: '',
    guildId: '',
    createdTimestamp: 1657025883339,
    type: 'DEFAULT',
    system: false,
    content: '„ÖáÌóà',
    pinned: false,
    author: User {
      id: string,
      bot: boolean,
      system: boolean,
      flags: UserFlags { bitfield: 0 },
      username: string,
      discriminator: string(likenumber),
      avatar: string(likeuid),
      banner: undefined,
      accentColor: undefined
    },
    ...
  */
  client.on('messageCreate', async messageEvent => {
    if(isNeverMindMessage(messageEvent)) return;
    const parsed = parseCommandMessage(messageEvent)
    if(parsed.mentioned){
      // ÏïÑÎ¨¥Í≤ÉÎèÑ ÏûÖÎ†•ÌïòÏßÄ ÏïäÎäîÍ≤ΩÏö∞
      if(parsed.message.length === 0 || /^(\?|help)$/.test(parsed.message)){
        const helpMessage = await messageEvent.channel.send({ embeds:[
          defineEmbed({ 
            color: 'WHITE',
            title: 'Ï†ÄÎ•º Î∂àÎü¨Ï£ºÏÖ®Íµ∞Ïöî.\nÌÇ§Î≥¥ÎìúÎ°ú Î™ÖÎ†πÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.',
            description: `ÏïΩÏÜçÏû°Í∏∞\n\`\`\`\n@${usedMeta.botName} ÏïΩÏÜç\n\`\`\`\n\nÏù¥ Î©îÏãúÏßÄÎäî ÏûêÎèô ÏÇ≠Ï†úÎê©ÎãàÎã§`,
          })
        ]})
        
        messageEvent.delete({ timeout: 20000 });
        setTimeout(()=>{
          helpMessage.delete({ timeout: 20000 });
        },10000)

      } else if(parsed.message === "ÏïΩÏÜç"){
        handleCreateSession({ messageEvent })
        return;
      } else {
        await messageEvent.reply(anyReciveText())
        return;
      }
    }
  });
}

function isNeverMindMessage (messageEvent){
  return (
    messageEvent.content.startsWith('!') || 
    messageEvent.author.bot === true
  ) ? true : false
}

function useCommandMessageHelper (bot){
  const botId = bot.id
  const botName = bot.username
  const botDisc = bot.discriminator
  const tagText = `${botName}#${botDisc}`
  const menText = `<@${botId}>`

  return {
    usedMeta:{
      botId,
      botName,
      botDisc,
      tagText,
      menText,
    },
    parseCommandMessage (messageEvent){
      const { content } = messageEvent
    
      const helperValues = Object.defineProperties({
        tagText
      }, {
        mentioned: {
          enumerable: true,
          configurable: false,
          get (){
            return content.startsWith(menText)
          }
        },
        content: {
          enumerable: true,
          configurable: false,
          get (){
            return content
          }
        },
        message: { 
          enumerable: true,
          configurable: false,
          get (){
            if(!this.mentioned){
              return this.content
            }
            const rightContent = content.substr(menText.length)
            return rightContent.replace(/^\s*/,"").trim()
          }
        },
      })
  
      return helperValues
    }
  }
}

function defineEmbed (payload = {}){
  return payload;
}

const { 
  MessageActionRow, 
  MessageButton,
} = require("discord.js");

const { generateUUID } = require("../../utils/nodeFunction");
 
const FINGER_ACTION = {
  ACCEPT: "FIN_ACCEPT",
  MAYBE: "FIN_MAYBE",
  DONT: "FIN_DONT",
}

const STARTER_ACTION = {
  CANCEL: "STA_CANCEL",
  DEPLOY: "STA_DEPLOY",
}

const FINGER_ACTION_EMOJI = {
  ACCEPT: "ü§ó",
  MAYBE: "üòÖ",
  DONT: "üò¢",
}

function anyReciveText (){
  const anytext = [
    'ÎÑ§?',
    'Ï†ÄÎ≤àÏóêÎèÑ Îì§Ïñ¥Î¥§Ïñ¥Ïöî. Ïñ∏Ï†úÏòÄÎçîÎùº...', 
    'ÏïÑ, ÎÑ§... ÏïåÍ≤†Ïñ¥Ïöî.',
    'Ïù¥Îü∞ÏãùÏúºÎ°ú ÎßêÏùÑ Í±∏Ïñ¥Ï£ºÎäîÍ≤å ÎÇòÏÅòÏßÄ ÏïäÎÑ§Ïöî.', 
    'ÏïÑ, ÎÑ§ Í∑∏Îü∞ÎßêÏùÑ Îì§ÏúºÎãà Î∞òÍ∞ëÎÑ§Ïöî',
    'Î¨¥Ïä® ÏùòÎØ∏Ïù∏Í±∞Ï£†?',
    'Í≥ÑÏÜç ÏñòÍ∏∞Ìï¥ Î≥¥ÏãúÍ≤†Ïñ¥Ïöî?',
    'ÎåÄÌôîÎ•º ÎÇòÎàå ÎïåÎäî ÏïÑÎãàÏßÄÎßå... Í∞êÏÇ¨Ìï©ÎãàÎã§!',
  ]
  return anytext[Math.floor(Math.random() * anytext.length)]
}

async function handleCreateSession ({ messageEvent }){

  const fingerSessionId = generateUUID()
  const startUser = messageEvent.author
  
  const promiseEmbed = defineEmbed({ 
    color: 'RED',
    title: 'ÏÉàÎ°úÏö¥ ÏïΩÏÜç ÎßåÎì§Í∏∞',
    description: `${startUser.username}ÎãòÏù¥ ÏÉàÎ°úÏö¥ ÏïΩÏÜçÏùÑ ÎßåÎìúÎäî Ï§ëÏù¥ÏóêÏöî\nüíñÎëêÍ∑ºÎëêÍ∑ºüíñ`,
  })

  const starterEmbed = defineEmbed({ 
    color: 'YELLOW',
    title: 'ÌïëÍ±∞Î¥áÏù¥ ÏïΩÏÜç ÎßåÎì§Í∏∞Î•º ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§',
    description: 'Ï†ú ÎßêÏóê ÎåÄÎãµÌïòÏãúÎ©¥ ÏïΩÏÜçÏù¥ ÎßåÎì§Ïñ¥ÏßëÎãàÎã§',
  })
 
  const intentionMessageObject = await messageEvent.channel.send({
    embeds: [promiseEmbed],
    components: [reduceMessageActionRow(createUserIntentionButtons({ fingerSessionId, disabled:true }))],
  })

  const setupMessageObject = await messageEvent.reply({
    embeds: [starterEmbed],
    components: [reduceMessageActionRow(createStarterSetupButtons({ fingerSessionId, disabled:false }))],
    ephemeral: true,
  })
  
  const collector = messageEvent.channel.createMessageComponentCollector({
    filter (interaction){
      return interaction.customId.startsWith(fingerSessionId)
    },
  })

  collector.on("collect", async (interaction)=>{
    const action = interaction.customId.substr(fingerSessionId.length + 1)
    switch (action){
      case FINGER_ACTION.ACCEPT:
        break
      case FINGER_ACTION.MAYBE:
        break
      case FINGER_ACTION.DONT:
        break
      case STARTER_ACTION.CANCEL:
        setupMessageObject.delete({ timeout: 20000 });
        intentionMessageObject.delete({ timeout: 20000 });
        messageEvent.delete({ timeout: 20000 });
        break
      case STARTER_ACTION.DEPLOY:
        break
      default:
        console.log(`ÏßÄÏõêÌïòÏßÄ ÏïäÎäî on::collect::FINGER_ACTION[${action}]${STARTER_ACTION.CANCEL}`)
        break
    }
  })
}

function reduceMessageActionRow (components){
  return new MessageActionRow().addComponents(...components)
}

function createUserIntentionButtons ({ 
  fingerSessionId, 
  disabled = false 
}){
  return [
    new MessageButton()
    .setCustomId(`${fingerSessionId}:${FINGER_ACTION.ACCEPT}`)
    .setLabel(`${FINGER_ACTION_EMOJI.ACCEPT}Ï∞∏Ïó¨`)
    .setStyle("PRIMARY")
    .setDisabled(disabled),
    new MessageButton()
    .setCustomId(`${fingerSessionId}:${FINGER_ACTION.MAYBE}`)
    .setLabel(`${FINGER_ACTION_EMOJI.MAYBE}ÏïÑÎßà`)
    .setStyle("SUCCESS")
    .setDisabled(disabled),
    new MessageButton()
    .setCustomId(`${fingerSessionId}:${FINGER_ACTION.DONT}`)
    .setLabel(`${FINGER_ACTION_EMOJI.DONT}Î∂àÏ∞∏`)
    .setStyle("DANGER")
    .setDisabled(disabled),
  ]
}

function createStarterSetupButtons ({ 
  fingerSessionId, 
  disabled = false 
}){
  return [
    new MessageButton()
    .setCustomId(`${fingerSessionId}:${STARTER_ACTION.CANCEL}`)
    .setLabel(`‚ùåÏÉùÏÑ±Ï∑®ÏÜå`)
    .setStyle("PRIMARY")
    .setDisabled(disabled),
    new MessageButton()
    .setCustomId(`${fingerSessionId}:${FINGER_ACTION.DEPLOY}`)
    .setLabel(`üì¢Í≥µÏßÄÌï©ÎãàÎã§`)
    .setStyle("SUCCESS")
    .setDisabled(disabled),
  ]
}


module.exports = {
  useMessageInteraction
}